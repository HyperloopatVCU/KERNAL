
MAIN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  000007a6  0000083a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800124  00800124  0000085e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000085e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000008d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001855  00000000  00000000  000009b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000918  00000000  00000000  0000220d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000999  00000000  00000000  00002b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000394  00000000  00000000  000034c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000515  00000000  00000000  00003854  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fab  00000000  00000000  00003d69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 82 03 	jmp	0x704	; 0x704 <__vector_17>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ea       	ldi	r30, 0xA6	; 166
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 32       	cpi	r26, 0x26	; 38
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 84 00 	call	0x108	; 0x108 <main>
  9e:	0c 94 d1 03 	jmp	0x7a2	; 0x7a2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <set_me_up>:
#include "base_includes.h"
#include "NetWizard/NETWIZARD.h"

#define MASTER

uint8_t set_me_up(socker* sock) {
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
  ac:	ec 01       	movw	r28, r24
	uint16_t r;
	quad server = {192,168,1,1};
	
	sock->ID = 0;
  ae:	18 82       	st	Y, r1
	sock->base = S0;
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	94 e0       	ldi	r25, 0x04	; 4
  b4:	9a 83       	std	Y+2, r25	; 0x02
  b6:	89 83       	std	Y+1, r24	; 0x01
	sock->mode = TCP;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	8b 83       	std	Y+3, r24	; 0x03
	sock->port = 8080;
  bc:	20 e9       	ldi	r18, 0x90	; 144
  be:	3f e1       	ldi	r19, 0x1F	; 31
  c0:	3d 83       	std	Y+5, r19	; 0x05
  c2:	2c 83       	std	Y+4, r18	; 0x04
	sock->gateway = server;
  c4:	90 ec       	ldi	r25, 0xC0	; 192
  c6:	9e 87       	std	Y+14, r25	; 0x0e
  c8:	98 ea       	ldi	r25, 0xA8	; 168
  ca:	9f 87       	std	Y+15, r25	; 0x0f
  cc:	88 8b       	std	Y+16, r24	; 0x10
  ce:	89 8b       	std	Y+17, r24	; 0x11
	sock->netmask = (quad){255,255,255,0};
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	8a 8b       	std	Y+18, r24	; 0x12
  d4:	8b 8b       	std	Y+19, r24	; 0x13
  d6:	8c 8b       	std	Y+20, r24	; 0x14
  d8:	1d 8a       	std	Y+21, r1	; 0x15

	/* Write default configuration */
	net_config_default(sock);
  da:	ce 01       	movw	r24, r28
  dc:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <net_config_default>
	
	/* OPEN socket */
	if (opensocket(sock)) return -1; /* Socket won't OPEN */
  e0:	ce 01       	movw	r24, r28
  e2:	0e 94 b9 01 	call	0x372	; 0x372 <opensocket>
  e6:	18 2f       	mov	r17, r24
  e8:	81 11       	cpse	r24, r1
  ea:	09 c0       	rjmp	.+18     	; 0xfe <set_me_up+0x58>
	
	#ifdef MASTER
	/* Set up master */
	
	/* LISTEN for connection */
	switch(r = listen_block(sock)) {
  ec:	ce 01       	movw	r24, r28
  ee:	0e 94 3e 02 	call	0x47c	; 0x47c <listen_block>
  f2:	28 2f       	mov	r18, r24
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	23 2b       	or	r18, r19
  f8:	19 f4       	brne	.+6      	; 0x100 <set_me_up+0x5a>
		case 0: break;
		case -1: return -2; /* Socket won't ESTABLISH */
		default: return r; /*Something undefined happened*/
	}
	#endif
	return 0;
  fa:	81 2f       	mov	r24, r17
  fc:	01 c0       	rjmp	.+2      	; 0x100 <set_me_up+0x5a>

	/* Write default configuration */
	net_config_default(sock);
	
	/* OPEN socket */
	if (opensocket(sock)) return -1; /* Socket won't OPEN */
  fe:	8f ef       	ldi	r24, 0xFF	; 255
		case -1: return -2; /* Socket won't ESTABLISH */
		default: return r; /*Something undefined happened*/
	}
	#endif
	return 0;
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	1f 91       	pop	r17
 106:	08 95       	ret

00000108 <main>:

int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
 110:	66 97       	sbiw	r28, 0x16	; 22
 112:	0f b6       	in	r0, 0x3f	; 63
 114:	f8 94       	cli
 116:	de bf       	out	0x3e, r29	; 62
 118:	0f be       	out	0x3f, r0	; 63
 11a:	cd bf       	out	0x3d, r28	; 61
	uint16_t size;
	socker socket;
	uint8_t buffer[500] = {0};
	set_me_up(&socket);
 11c:	ce 01       	movw	r24, r28
 11e:	01 96       	adiw	r24, 0x01	; 1
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <set_me_up>
	
	putline(&socket, (uint8_t*)"\e[H\e[J\e[1;5;97;105m Welcome! \e[m\r\n", 34);
 124:	42 e2       	ldi	r20, 0x22	; 34
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	60 e0       	ldi	r22, 0x00	; 0
 12a:	71 e0       	ldi	r23, 0x01	; 1
 12c:	ce 01       	movw	r24, r28
 12e:	01 96       	adiw	r24, 0x01	; 1
 130:	0e 94 56 02 	call	0x4ac	; 0x4ac <putline>
 134:	ff cf       	rjmp	.-2      	; 0x134 <main+0x2c>

00000136 <write>:
	write(base + S_RX_RD0, (uint8_t)(brp>>H));
	write(base + S_RX_RD1, (uint8_t)brp);
	write(base + S_CR, RECV);
end:
	return index;
}
 136:	0f 93       	push	r16
 138:	1f 93       	push	r17
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	18 2f       	mov	r17, r24
 140:	09 2f       	mov	r16, r25
 142:	d6 2f       	mov	r29, r22
 144:	0c b4       	in	r0, 0x2c	; 44
 146:	04 fc       	sbrc	r0, 4
 148:	03 c0       	rjmp	.+6      	; 0x150 <write+0x1a>
 14a:	8c e2       	ldi	r24, 0x2C	; 44
 14c:	0e 94 a9 03 	call	0x752	; 0x752 <spi_setup>
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 15c:	cb e0       	ldi	r28, 0x0B	; 11
 15e:	08 c0       	rjmp	.+16     	; 0x170 <write+0x3a>
 160:	88 e0       	ldi	r24, 0x08	; 8
 162:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 166:	c1 50       	subi	r28, 0x01	; 1
 168:	b9 f0       	breq	.+46     	; 0x198 <write+0x62>
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 170:	80 ef       	ldi	r24, 0xF0	; 240
 172:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 176:	81 11       	cpse	r24, r1
 178:	f3 cf       	rjmp	.-26     	; 0x160 <write+0x2a>
 17a:	80 2f       	mov	r24, r16
 17c:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 180:	81 2f       	mov	r24, r17
 182:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 186:	8d 2f       	mov	r24, r29
 188:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 18c:	88 e0       	ldi	r24, 0x08	; 8
 18e:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	08 95       	ret

000001a2 <read>:
 1a2:	1f 93       	push	r17
 1a4:	cf 93       	push	r28
 1a6:	df 93       	push	r29
 1a8:	d8 2f       	mov	r29, r24
 1aa:	19 2f       	mov	r17, r25
 1ac:	0c b4       	in	r0, 0x2c	; 44
 1ae:	04 fc       	sbrc	r0, 4
 1b0:	03 c0       	rjmp	.+6      	; 0x1b8 <read+0x16>
 1b2:	8c e2       	ldi	r24, 0x2C	; 44
 1b4:	0e 94 a9 03 	call	0x752	; 0x752 <spi_setup>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 1c4:	cb e0       	ldi	r28, 0x0B	; 11
 1c6:	08 c0       	rjmp	.+16     	; 0x1d8 <read+0x36>
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 1ce:	c1 50       	subi	r28, 0x01	; 1
 1d0:	c1 f0       	breq	.+48     	; 0x202 <read+0x60>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 1d8:	8f e0       	ldi	r24, 0x0F	; 15
 1da:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 1de:	81 11       	cpse	r24, r1
 1e0:	f3 cf       	rjmp	.-26     	; 0x1c8 <read+0x26>
 1e2:	81 2f       	mov	r24, r17
 1e4:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 1e8:	8d 2f       	mov	r24, r29
 1ea:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 1ee:	8f ef       	ldi	r24, 0xFF	; 255
 1f0:	0e 94 b7 03 	call	0x76e	; 0x76e <spi_block>
 1f4:	c8 2f       	mov	r28, r24
 1f6:	88 e0       	ldi	r24, 0x08	; 8
 1f8:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 1fc:	88 e0       	ldi	r24, 0x08	; 8
 1fe:	0e 94 b1 03 	call	0x762	; 0x762 <SS_S>
 202:	8c 2f       	mov	r24, r28
 204:	df 91       	pop	r29
 206:	cf 91       	pop	r28
 208:	1f 91       	pop	r17
 20a:	08 95       	ret

0000020c <getaddressconf>:
 20c:	af 92       	push	r10
 20e:	bf 92       	push	r11
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	8c 01       	movw	r16, r24
 220:	fc 01       	movw	r30, r24
 222:	c1 81       	ldd	r28, Z+1	; 0x01
 224:	d2 81       	ldd	r29, Z+2	; 0x02
 226:	cc 0f       	add	r28, r28
 228:	cd 2f       	mov	r28, r29
 22a:	cc 1f       	adc	r28, r28
 22c:	dd 0b       	sbc	r29, r29
 22e:	d1 95       	neg	r29
 230:	c6 70       	andi	r28, 0x06	; 6
 232:	8a e1       	ldi	r24, 0x1A	; 26
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 23a:	d8 2f       	mov	r29, r24
 23c:	8b e1       	ldi	r24, 0x1B	; 27
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 244:	6d 2f       	mov	r22, r29
 246:	70 e0       	ldi	r23, 0x00	; 0
 248:	9b 01       	movw	r18, r22
 24a:	0c 2e       	mov	r0, r28
 24c:	02 c0       	rjmp	.+4      	; 0x252 <getaddressconf+0x46>
 24e:	35 95       	asr	r19
 250:	27 95       	ror	r18
 252:	0a 94       	dec	r0
 254:	e2 f7       	brpl	.-8      	; 0x24e <getaddressconf+0x42>
 256:	23 70       	andi	r18, 0x03	; 3
 258:	33 27       	eor	r19, r19
 25a:	e4 e0       	ldi	r30, 0x04	; 4
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	df 01       	movw	r26, r30
 260:	02 c0       	rjmp	.+4      	; 0x266 <getaddressconf+0x5a>
 262:	aa 0f       	add	r26, r26
 264:	bb 1f       	adc	r27, r27
 266:	2a 95       	dec	r18
 268:	e2 f7       	brpl	.-8      	; 0x262 <getaddressconf+0x56>
 26a:	da 2e       	mov	r13, r26
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	9c 01       	movw	r18, r24
 270:	0c 2e       	mov	r0, r28
 272:	02 c0       	rjmp	.+4      	; 0x278 <getaddressconf+0x6c>
 274:	35 95       	asr	r19
 276:	27 95       	ror	r18
 278:	0a 94       	dec	r0
 27a:	e2 f7       	brpl	.-8      	; 0x274 <getaddressconf+0x68>
 27c:	23 70       	andi	r18, 0x03	; 3
 27e:	33 27       	eor	r19, r19
 280:	02 c0       	rjmp	.+4      	; 0x286 <getaddressconf+0x7a>
 282:	ee 0f       	add	r30, r30
 284:	ff 1f       	adc	r31, r31
 286:	2a 95       	dec	r18
 288:	e2 f7       	brpl	.-8      	; 0x282 <getaddressconf+0x76>
 28a:	ee 2e       	mov	r14, r30
 28c:	cc 23       	and	r28, r28
 28e:	39 f1       	breq	.+78     	; 0x2de <getaddressconf+0xd2>
 290:	f1 2c       	mov	r15, r1
 292:	d0 e0       	ldi	r29, 0x00	; 0
 294:	44 e0       	ldi	r20, 0x04	; 4
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	9b 01       	movw	r18, r22
 29a:	0c 2e       	mov	r0, r28
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <getaddressconf+0x96>
 29e:	35 95       	asr	r19
 2a0:	27 95       	ror	r18
 2a2:	0a 94       	dec	r0
 2a4:	e2 f7       	brpl	.-8      	; 0x29e <getaddressconf+0x92>
 2a6:	23 70       	andi	r18, 0x03	; 3
 2a8:	33 27       	eor	r19, r19
 2aa:	5a 01       	movw	r10, r20
 2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <getaddressconf+0xa6>
 2ae:	aa 0c       	add	r10, r10
 2b0:	bb 1c       	adc	r11, r11
 2b2:	2a 95       	dec	r18
 2b4:	e2 f7       	brpl	.-8      	; 0x2ae <getaddressconf+0xa2>
 2b6:	fa 0c       	add	r15, r10
 2b8:	9c 01       	movw	r18, r24
 2ba:	0c 2e       	mov	r0, r28
 2bc:	02 c0       	rjmp	.+4      	; 0x2c2 <getaddressconf+0xb6>
 2be:	35 95       	asr	r19
 2c0:	27 95       	ror	r18
 2c2:	0a 94       	dec	r0
 2c4:	e2 f7       	brpl	.-8      	; 0x2be <getaddressconf+0xb2>
 2c6:	23 70       	andi	r18, 0x03	; 3
 2c8:	33 27       	eor	r19, r19
 2ca:	5a 01       	movw	r10, r20
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <getaddressconf+0xc6>
 2ce:	aa 0c       	add	r10, r10
 2d0:	bb 1c       	adc	r11, r11
 2d2:	2a 95       	dec	r18
 2d4:	e2 f7       	brpl	.-8      	; 0x2ce <getaddressconf+0xc2>
 2d6:	da 0d       	add	r29, r10
 2d8:	c2 50       	subi	r28, 0x02	; 2
 2da:	f1 f6       	brne	.-68     	; 0x298 <getaddressconf+0x8c>
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <getaddressconf+0xd6>
 2de:	f1 2c       	mov	r15, r1
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	ef 0d       	add	r30, r15
 2e4:	ad 0f       	add	r26, r29
 2e6:	a9 30       	cpi	r26, 0x09	; 9
 2e8:	18 f0       	brcs	.+6      	; 0x2f0 <getaddressconf+0xe4>
 2ea:	80 e2       	ldi	r24, 0x20	; 32
 2ec:	d8 2e       	mov	r13, r24
 2ee:	dd 1a       	sub	r13, r29
 2f0:	e9 30       	cpi	r30, 0x09	; 9
 2f2:	18 f0       	brcs	.+6      	; 0x2fa <getaddressconf+0xee>
 2f4:	80 e2       	ldi	r24, 0x20	; 32
 2f6:	e8 2e       	mov	r14, r24
 2f8:	ef 18       	sub	r14, r15
 2fa:	dd 20       	and	r13, r13
 2fc:	81 f0       	breq	.+32     	; 0x31e <getaddressconf+0x112>
 2fe:	8d 2d       	mov	r24, r13
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	98 2f       	mov	r25, r24
 304:	88 27       	eor	r24, r24
 306:	01 97       	sbiw	r24, 0x01	; 1
 308:	f8 01       	movw	r30, r16
 30a:	91 87       	std	Z+9, r25	; 0x09
 30c:	80 87       	std	Z+8, r24	; 0x08
 30e:	8d 2f       	mov	r24, r29
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	98 2f       	mov	r25, r24
 314:	88 27       	eor	r24, r24
 316:	90 5a       	subi	r25, 0xA0	; 160
 318:	97 83       	std	Z+7, r25	; 0x07
 31a:	86 83       	std	Z+6, r24	; 0x06
 31c:	07 c0       	rjmp	.+14     	; 0x32c <getaddressconf+0x120>
 31e:	f8 01       	movw	r30, r16
 320:	11 86       	std	Z+9, r1	; 0x09
 322:	10 86       	std	Z+8, r1	; 0x08
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	90 e8       	ldi	r25, 0x80	; 128
 328:	97 83       	std	Z+7, r25	; 0x07
 32a:	86 83       	std	Z+6, r24	; 0x06
 32c:	ee 20       	and	r14, r14
 32e:	81 f0       	breq	.+32     	; 0x350 <getaddressconf+0x144>
 330:	8e 2d       	mov	r24, r14
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	98 2f       	mov	r25, r24
 336:	88 27       	eor	r24, r24
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f8 01       	movw	r30, r16
 33c:	95 87       	std	Z+13, r25	; 0x0d
 33e:	84 87       	std	Z+12, r24	; 0x0c
 340:	8f 2d       	mov	r24, r15
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	98 2f       	mov	r25, r24
 346:	88 27       	eor	r24, r24
 348:	90 5c       	subi	r25, 0xC0	; 192
 34a:	93 87       	std	Z+11, r25	; 0x0b
 34c:	82 87       	std	Z+10, r24	; 0x0a
 34e:	07 c0       	rjmp	.+14     	; 0x35e <getaddressconf+0x152>
 350:	f8 01       	movw	r30, r16
 352:	15 86       	std	Z+13, r1	; 0x0d
 354:	14 86       	std	Z+12, r1	; 0x0c
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	90 e6       	ldi	r25, 0x60	; 96
 35a:	93 87       	std	Z+11, r25	; 0x0b
 35c:	82 87       	std	Z+10, r24	; 0x0a
 35e:	df 91       	pop	r29
 360:	cf 91       	pop	r28
 362:	1f 91       	pop	r17
 364:	0f 91       	pop	r16
 366:	ff 90       	pop	r15
 368:	ef 90       	pop	r14
 36a:	df 90       	pop	r13
 36c:	bf 90       	pop	r11
 36e:	af 90       	pop	r10
 370:	08 95       	ret

00000372 <opensocket>:
 372:	2f 92       	push	r2
 374:	3f 92       	push	r3
 376:	4f 92       	push	r4
 378:	5f 92       	push	r5
 37a:	6f 92       	push	r6
 37c:	7f 92       	push	r7
 37e:	8f 92       	push	r8
 380:	9f 92       	push	r9
 382:	af 92       	push	r10
 384:	bf 92       	push	r11
 386:	cf 92       	push	r12
 388:	df 92       	push	r13
 38a:	ef 92       	push	r14
 38c:	ff 92       	push	r15
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
 398:	e9 80       	ldd	r14, Y+1	; 0x01
 39a:	fa 80       	ldd	r15, Y+2	; 0x02
 39c:	0f 2e       	mov	r0, r31
 39e:	fa e0       	ldi	r31, 0x0A	; 10
 3a0:	2f 2e       	mov	r2, r31
 3a2:	f0 2d       	mov	r31, r0
 3a4:	57 01       	movw	r10, r14
 3a6:	84 e0       	ldi	r24, 0x04	; 4
 3a8:	a8 0e       	add	r10, r24
 3aa:	b1 1c       	adc	r11, r1
 3ac:	67 01       	movw	r12, r14
 3ae:	85 e0       	ldi	r24, 0x05	; 5
 3b0:	c8 0e       	add	r12, r24
 3b2:	d1 1c       	adc	r13, r1
 3b4:	47 01       	movw	r8, r14
 3b6:	82 e1       	ldi	r24, 0x12	; 18
 3b8:	88 0e       	add	r8, r24
 3ba:	91 1c       	adc	r9, r1
 3bc:	37 01       	movw	r6, r14
 3be:	83 e1       	ldi	r24, 0x13	; 19
 3c0:	68 0e       	add	r6, r24
 3c2:	71 1c       	adc	r7, r1
 3c4:	87 01       	movw	r16, r14
 3c6:	0f 5f       	subi	r16, 0xFF	; 255
 3c8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ca:	27 01       	movw	r4, r14
 3cc:	83 e0       	ldi	r24, 0x03	; 3
 3ce:	48 0e       	add	r4, r24
 3d0:	51 1c       	adc	r5, r1
 3d2:	6b 81       	ldd	r22, Y+3	; 0x03
 3d4:	c7 01       	movw	r24, r14
 3d6:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 3da:	6d 81       	ldd	r22, Y+5	; 0x05
 3dc:	c5 01       	movw	r24, r10
 3de:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 3e2:	6c 81       	ldd	r22, Y+4	; 0x04
 3e4:	c6 01       	movw	r24, r12
 3e6:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 3ea:	62 e0       	ldi	r22, 0x02	; 2
 3ec:	c4 01       	movw	r24, r8
 3ee:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 3f2:	68 e1       	ldi	r22, 0x18	; 24
 3f4:	c3 01       	movw	r24, r6
 3f6:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	c8 01       	movw	r24, r16
 3fe:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 402:	33 24       	eor	r3, r3
 404:	3a 94       	dec	r3
 406:	3a 94       	dec	r3
 408:	31 10       	cpse	r3, r1
 40a:	fd cf       	rjmp	.-6      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40c:	c2 01       	movw	r24, r4
 40e:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 412:	83 31       	cpi	r24, 0x13	; 19
 414:	41 f0       	breq	.+16     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 416:	60 e1       	ldi	r22, 0x10	; 16
 418:	c8 01       	movw	r24, r16
 41a:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 41e:	2a 94       	dec	r2
 420:	21 10       	cpse	r2, r1
 422:	d7 cf       	rjmp	.-82     	; 0x3d2 <opensocket+0x60>
 424:	04 c0       	rjmp	.+8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 426:	ce 01       	movw	r24, r28
 428:	0e 94 06 01 	call	0x20c	; 0x20c <getaddressconf>
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 42e:	33 24       	eor	r3, r3
 430:	3a 94       	dec	r3
 432:	83 2d       	mov	r24, r3
 434:	df 91       	pop	r29
 436:	cf 91       	pop	r28
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	ff 90       	pop	r15
 43e:	ef 90       	pop	r14
 440:	df 90       	pop	r13
 442:	cf 90       	pop	r12
 444:	bf 90       	pop	r11
 446:	af 90       	pop	r10
 448:	9f 90       	pop	r9
 44a:	8f 90       	pop	r8
 44c:	7f 90       	pop	r7
 44e:	6f 90       	pop	r6
 450:	5f 90       	pop	r5
 452:	4f 90       	pop	r4
 454:	3f 90       	pop	r3
 456:	2f 90       	pop	r2
 458:	08 95       	ret

0000045a <establish_block>:
 45a:	cf 93       	push	r28
 45c:	df 93       	push	r29
 45e:	ec 01       	movw	r28, r24
 460:	23 96       	adiw	r28, 0x03	; 3
 462:	ce 01       	movw	r24, r28
 464:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 468:	88 23       	and	r24, r24
 46a:	21 f0       	breq	.+8      	; 0x474 <establish_block+0x1a>
 46c:	87 31       	cpi	r24, 0x17	; 23
 46e:	c9 f7       	brne	.-14     	; 0x462 <establish_block+0x8>
 470:	80 e0       	ldi	r24, 0x00	; 0
 472:	01 c0       	rjmp	.+2      	; 0x476 <establish_block+0x1c>
 474:	8f ef       	ldi	r24, 0xFF	; 255
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <listen_block>:
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	fc 01       	movw	r30, r24
 482:	c1 81       	ldd	r28, Z+1	; 0x01
 484:	d2 81       	ldd	r29, Z+2	; 0x02
 486:	62 e0       	ldi	r22, 0x02	; 2
 488:	ce 01       	movw	r24, r28
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 490:	ce 01       	movw	r24, r28
 492:	03 96       	adiw	r24, 0x03	; 3
 494:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 498:	84 31       	cpi	r24, 0x14	; 20
 49a:	21 f4       	brne	.+8      	; 0x4a4 <listen_block+0x28>
 49c:	ce 01       	movw	r24, r28
 49e:	0e 94 2d 02 	call	0x45a	; 0x45a <establish_block>
 4a2:	01 c0       	rjmp	.+2      	; 0x4a6 <listen_block+0x2a>
 4a4:	8e ef       	ldi	r24, 0xFE	; 254
 4a6:	df 91       	pop	r29
 4a8:	cf 91       	pop	r28
 4aa:	08 95       	ret

000004ac <putline>:
 4ac:	2f 92       	push	r2
 4ae:	3f 92       	push	r3
 4b0:	4f 92       	push	r4
 4b2:	5f 92       	push	r5
 4b4:	6f 92       	push	r6
 4b6:	7f 92       	push	r7
 4b8:	8f 92       	push	r8
 4ba:	9f 92       	push	r9
 4bc:	af 92       	push	r10
 4be:	bf 92       	push	r11
 4c0:	cf 92       	push	r12
 4c2:	df 92       	push	r13
 4c4:	ef 92       	push	r14
 4c6:	ff 92       	push	r15
 4c8:	0f 93       	push	r16
 4ca:	1f 93       	push	r17
 4cc:	cf 93       	push	r28
 4ce:	df 93       	push	r29
 4d0:	8c 01       	movw	r16, r24
 4d2:	26 2e       	mov	r2, r22
 4d4:	37 2e       	mov	r3, r23
 4d6:	5a 01       	movw	r10, r20
 4d8:	fc 01       	movw	r30, r24
 4da:	c1 80       	ldd	r12, Z+1	; 0x01
 4dc:	d2 80       	ldd	r13, Z+2	; 0x02
 4de:	36 01       	movw	r6, r12
 4e0:	f4 e2       	ldi	r31, 0x24	; 36
 4e2:	6f 0e       	add	r6, r31
 4e4:	71 1c       	adc	r7, r1
 4e6:	c3 01       	movw	r24, r6
 4e8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 4ec:	f8 2e       	mov	r15, r24
 4ee:	26 01       	movw	r4, r12
 4f0:	85 e2       	ldi	r24, 0x25	; 37
 4f2:	48 0e       	add	r4, r24
 4f4:	51 1c       	adc	r5, r1
 4f6:	c2 01       	movw	r24, r4
 4f8:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 4fc:	88 2e       	mov	r8, r24
 4fe:	f8 01       	movw	r30, r16
 500:	c4 85       	ldd	r28, Z+12	; 0x0c
 502:	d5 85       	ldd	r29, Z+13	; 0x0d
 504:	c6 01       	movw	r24, r12
 506:	03 96       	adiw	r24, 0x03	; 3
 508:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <read>
 50c:	88 23       	and	r24, r24
 50e:	09 f4       	brne	.+2      	; 0x512 <putline+0x66>
 510:	45 c0       	rjmp	.+138    	; 0x59c <putline+0xf0>
 512:	8c 31       	cpi	r24, 0x1C	; 28
 514:	19 f4       	brne	.+6      	; 0x51c <putline+0x70>
 516:	8e ef       	ldi	r24, 0xFE	; 254
 518:	9f ef       	ldi	r25, 0xFF	; 255
 51a:	42 c0       	rjmp	.+132    	; 0x5a0 <putline+0xf4>
 51c:	f8 01       	movw	r30, r16
 51e:	80 85       	ldd	r24, Z+8	; 0x08
 520:	91 85       	ldd	r25, Z+9	; 0x09
 522:	00 97       	sbiw	r24, 0x00	; 0
 524:	e9 f1       	breq	.+122    	; 0x5a0 <putline+0xf4>
 526:	91 2c       	mov	r9, r1
 528:	9f 28       	or	r9, r15
 52a:	21 96       	adiw	r28, 0x01	; 1
 52c:	11 f1       	breq	.+68     	; 0x572 <putline+0xc6>
 52e:	a1 14       	cp	r10, r1
 530:	b1 04       	cpc	r11, r1
 532:	19 f1       	breq	.+70     	; 0x57a <putline+0xce>
 534:	e2 2c       	mov	r14, r2
 536:	f3 2c       	mov	r15, r3
 538:	21 2c       	mov	r2, r1
 53a:	31 2c       	mov	r3, r1
 53c:	f7 01       	movw	r30, r14
 53e:	41 91       	ld	r20, Z+
 540:	7f 01       	movw	r14, r30
 542:	c4 01       	movw	r24, r8
 544:	82 0d       	add	r24, r2
 546:	93 1d       	adc	r25, r3
 548:	be 01       	movw	r22, r28
 54a:	0e 94 bd 03 	call	0x77a	; 0x77a <__udivmodhi4>
 54e:	f8 01       	movw	r30, r16
 550:	22 85       	ldd	r18, Z+10	; 0x0a
 552:	33 85       	ldd	r19, Z+11	; 0x0b
 554:	64 2f       	mov	r22, r20
 556:	82 0f       	add	r24, r18
 558:	93 1f       	adc	r25, r19
 55a:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 55e:	ff ef       	ldi	r31, 0xFF	; 255
 560:	2f 1a       	sub	r2, r31
 562:	3f 0a       	sbc	r3, r31
 564:	2c 16       	cp	r2, r28
 566:	3d 06       	cpc	r3, r29
 568:	38 f4       	brcc	.+14     	; 0x578 <putline+0xcc>
 56a:	a2 14       	cp	r10, r2
 56c:	b3 04       	cpc	r11, r3
 56e:	31 f7       	brne	.-52     	; 0x53c <putline+0x90>
 570:	04 c0       	rjmp	.+8      	; 0x57a <putline+0xce>
 572:	a1 2c       	mov	r10, r1
 574:	b1 2c       	mov	r11, r1
 576:	01 c0       	rjmp	.+2      	; 0x57a <putline+0xce>
 578:	51 01       	movw	r10, r2
 57a:	8a 0c       	add	r8, r10
 57c:	9b 1c       	adc	r9, r11
 57e:	69 2d       	mov	r22, r9
 580:	c3 01       	movw	r24, r6
 582:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 586:	68 2d       	mov	r22, r8
 588:	c2 01       	movw	r24, r4
 58a:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 58e:	60 e2       	ldi	r22, 0x20	; 32
 590:	c6 01       	movw	r24, r12
 592:	01 96       	adiw	r24, 0x01	; 1
 594:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 598:	c5 01       	movw	r24, r10
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <putline+0xf4>
 59c:	8f ef       	ldi	r24, 0xFF	; 255
 59e:	9f ef       	ldi	r25, 0xFF	; 255
 5a0:	df 91       	pop	r29
 5a2:	cf 91       	pop	r28
 5a4:	1f 91       	pop	r17
 5a6:	0f 91       	pop	r16
 5a8:	ff 90       	pop	r15
 5aa:	ef 90       	pop	r14
 5ac:	df 90       	pop	r13
 5ae:	cf 90       	pop	r12
 5b0:	bf 90       	pop	r11
 5b2:	af 90       	pop	r10
 5b4:	9f 90       	pop	r9
 5b6:	8f 90       	pop	r8
 5b8:	7f 90       	pop	r7
 5ba:	6f 90       	pop	r6
 5bc:	5f 90       	pop	r5
 5be:	4f 90       	pop	r4
 5c0:	3f 90       	pop	r3
 5c2:	2f 90       	pop	r2
 5c4:	08 95       	ret

000005c6 <net_config_default>:

/************************************************************************/
/* Default setup functions                                              */
/************************************************************************/

void net_config_default(socker* sock) {
 5c6:	cf 93       	push	r28
 5c8:	df 93       	push	r29
 5ca:	ec 01       	movw	r28, r24
	write(MR, 0);
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(IMR, 0); /*don't use interrupts at this time*/
 5d6:	60 e0       	ldi	r22, 0x00	; 0
 5d8:	86 e1       	ldi	r24, 0x16	; 22
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(RTR0, 0x27); /*retry timeout in .1 microseconds (4000)*/
 5e0:	67 e2       	ldi	r22, 0x27	; 39
 5e2:	87 e1       	ldi	r24, 0x17	; 23
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(RTR1, 0x10);
 5ea:	60 e1       	ldi	r22, 0x10	; 16
 5ec:	88 e1       	ldi	r24, 0x18	; 24
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(RCR, 30); /*retry count*/
 5f4:	6e e1       	ldi	r22, 0x1E	; 30
 5f6:	89 e1       	ldi	r24, 0x19	; 25
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(GAR0, sock->gateway.b0); /*gateway*/
 5fe:	6e 85       	ldd	r22, Y+14	; 0x0e
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(GAR1, sock->gateway.b1);
 608:	6f 85       	ldd	r22, Y+15	; 0x0f
 60a:	82 e0       	ldi	r24, 0x02	; 2
 60c:	90 e0       	ldi	r25, 0x00	; 0
 60e:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(GAR2, sock->gateway.b2);
 612:	68 89       	ldd	r22, Y+16	; 0x10
 614:	83 e0       	ldi	r24, 0x03	; 3
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(GAR3, sock->gateway.b3);
 61c:	69 89       	ldd	r22, Y+17	; 0x11
 61e:	84 e0       	ldi	r24, 0x04	; 4
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(SHAR0, 'R'); /*MAC*/
 626:	62 e5       	ldi	r22, 0x52	; 82
 628:	89 e0       	ldi	r24, 0x09	; 9
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SHAR1, 'E');
 630:	65 e4       	ldi	r22, 0x45	; 69
 632:	8a e0       	ldi	r24, 0x0A	; 10
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SHAR2, 'C');
 63a:	63 e4       	ldi	r22, 0x43	; 67
 63c:	8b e0       	ldi	r24, 0x0B	; 11
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SHAR3, 'R');
 644:	62 e5       	ldi	r22, 0x52	; 82
 646:	8c e0       	ldi	r24, 0x0C	; 12
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SHAR4, 'D');
 64e:	64 e4       	ldi	r22, 0x44	; 68
 650:	8d e0       	ldi	r24, 0x0D	; 13
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SHAR5, '0' + sock->ID);
 658:	68 81       	ld	r22, Y
 65a:	60 5d       	subi	r22, 0xD0	; 208
 65c:	8e e0       	ldi	r24, 0x0E	; 14
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(SUBR0, sock->netmask.b0); /*net mask*/
 664:	6a 89       	ldd	r22, Y+18	; 0x12
 666:	85 e0       	ldi	r24, 0x05	; 5
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SUBR1, sock->netmask.b1);
 66e:	6b 89       	ldd	r22, Y+19	; 0x13
 670:	86 e0       	ldi	r24, 0x06	; 6
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SUBR2, sock->netmask.b2);
 678:	6c 89       	ldd	r22, Y+20	; 0x14
 67a:	87 e0       	ldi	r24, 0x07	; 7
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SUBR3, sock->netmask.b3);
 682:	6d 89       	ldd	r22, Y+21	; 0x15
 684:	88 e0       	ldi	r24, 0x08	; 8
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(SIPR0, sock->gateway.b0 & sock->netmask.b0); /*IP*/
 68c:	6e 85       	ldd	r22, Y+14	; 0x0e
 68e:	8a 89       	ldd	r24, Y+18	; 0x12
 690:	68 23       	and	r22, r24
 692:	8f e0       	ldi	r24, 0x0F	; 15
 694:	90 e0       	ldi	r25, 0x00	; 0
 696:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SIPR1, sock->gateway.b1 & sock->netmask.b1);
 69a:	6f 85       	ldd	r22, Y+15	; 0x0f
 69c:	8b 89       	ldd	r24, Y+19	; 0x13
 69e:	68 23       	and	r22, r24
 6a0:	80 e1       	ldi	r24, 0x10	; 16
 6a2:	90 e0       	ldi	r25, 0x00	; 0
 6a4:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SIPR2, sock->gateway.b2 & sock->netmask.b2);
 6a8:	68 89       	ldd	r22, Y+16	; 0x10
 6aa:	8c 89       	ldd	r24, Y+20	; 0x14
 6ac:	68 23       	and	r22, r24
 6ae:	81 e1       	ldi	r24, 0x11	; 17
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(SIPR3, (sock->gateway.b3 & sock->netmask.b3) | (sock->ID & !sock->netmask.b3));
 6b6:	2d 89       	ldd	r18, Y+21	; 0x15
 6b8:	61 e0       	ldi	r22, 0x01	; 1
 6ba:	21 11       	cpse	r18, r1
 6bc:	60 e0       	ldi	r22, 0x00	; 0
 6be:	98 81       	ld	r25, Y
 6c0:	96 23       	and	r25, r22
 6c2:	89 89       	ldd	r24, Y+17	; 0x11
 6c4:	82 23       	and	r24, r18
 6c6:	69 2f       	mov	r22, r25
 6c8:	68 2b       	or	r22, r24
 6ca:	82 e1       	ldi	r24, 0x12	; 18
 6cc:	90 e0       	ldi	r25, 0x00	; 0
 6ce:	0e 94 9b 00 	call	0x136	; 0x136 <write>

	write(sock->base + S_TOS, 1);
 6d2:	89 81       	ldd	r24, Y+1	; 0x01
 6d4:	9a 81       	ldd	r25, Y+2	; 0x02
 6d6:	61 e0       	ldi	r22, 0x01	; 1
 6d8:	45 96       	adiw	r24, 0x15	; 21
 6da:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	write(sock->base + S_TTL, 0x80);
 6de:	89 81       	ldd	r24, Y+1	; 0x01
 6e0:	9a 81       	ldd	r25, Y+2	; 0x02
 6e2:	60 e8       	ldi	r22, 0x80	; 128
 6e4:	46 96       	adiw	r24, 0x16	; 22
 6e6:	0e 94 9b 00 	call	0x136	; 0x136 <write>
  
	write(RMSR, 0x03);
 6ea:	63 e0       	ldi	r22, 0x03	; 3
 6ec:	8a e1       	ldi	r24, 0x1A	; 26
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 9b 00 	call	0x136	; 0x136 <write>
	
	write(TMSR, 0x03);
 6f4:	63 e0       	ldi	r22, 0x03	; 3
 6f6:	8b e1       	ldi	r24, 0x1B	; 27
 6f8:	90 e0       	ldi	r25, 0x00	; 0
 6fa:	0e 94 9b 00 	call	0x136	; 0x136 <write>
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <__vector_17>:
  else {
    P_SPI &= (0xff^(1<<P_SS));
  }
}

void blockcheck(void) {
 704:	1f 92       	push	r1
 706:	0f 92       	push	r0
 708:	0f b6       	in	r0, 0x3f	; 63
 70a:	0f 92       	push	r0
 70c:	11 24       	eor	r1, r1
 70e:	2f 93       	push	r18
 710:	3f 93       	push	r19
 712:	4f 93       	push	r20
 714:	5f 93       	push	r21
 716:	6f 93       	push	r22
 718:	7f 93       	push	r23
 71a:	8f 93       	push	r24
 71c:	9f 93       	push	r25
 71e:	af 93       	push	r26
 720:	bf 93       	push	r27
 722:	ef 93       	push	r30
 724:	ff 93       	push	r31
 726:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end>
 72a:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__data_end+0x1>
 72e:	09 95       	icall
 730:	ff 91       	pop	r31
 732:	ef 91       	pop	r30
 734:	bf 91       	pop	r27
 736:	af 91       	pop	r26
 738:	9f 91       	pop	r25
 73a:	8f 91       	pop	r24
 73c:	7f 91       	pop	r23
 73e:	6f 91       	pop	r22
 740:	5f 91       	pop	r21
 742:	4f 91       	pop	r20
 744:	3f 91       	pop	r19
 746:	2f 91       	pop	r18
 748:	0f 90       	pop	r0
 74a:	0f be       	out	0x3f, r0	; 63
 74c:	0f 90       	pop	r0
 74e:	1f 90       	pop	r1
 750:	18 95       	reti

00000752 <spi_setup>:
 752:	84 b9       	out	0x04, r24	; 4
 754:	8c 32       	cpi	r24, 0x2C	; 44
 756:	11 f0       	breq	.+4      	; 0x75c <spi_setup+0xa>
 758:	80 e4       	ldi	r24, 0x40	; 64
 75a:	01 c0       	rjmp	.+2      	; 0x75e <spi_setup+0xc>
 75c:	81 e5       	ldi	r24, 0x51	; 81
 75e:	8c bd       	out	0x2c, r24	; 44
 760:	08 95       	ret

00000762 <SS_S>:
 762:	88 23       	and	r24, r24
 764:	11 f0       	breq	.+4      	; 0x76a <SS_S+0x8>
 766:	1a 9a       	sbi	0x03, 2	; 3
 768:	08 95       	ret
 76a:	1a 98       	cbi	0x03, 2	; 3
 76c:	08 95       	ret

0000076e <spi_block>:
    logger("\n\t");
	}*/
}

uint8_t spi_block(uint8_t dat) {
	SPDR = dat;
 76e:	8e bd       	out	0x2e, r24	; 46
	while (!(SPSR & (1<<SPIF)));
 770:	0d b4       	in	r0, 0x2d	; 45
 772:	07 fe       	sbrs	r0, 7
 774:	fd cf       	rjmp	.-6      	; 0x770 <spi_block+0x2>
  return SPDR;
 776:	8e b5       	in	r24, 0x2e	; 46
}
 778:	08 95       	ret

0000077a <__udivmodhi4>:
 77a:	aa 1b       	sub	r26, r26
 77c:	bb 1b       	sub	r27, r27
 77e:	51 e1       	ldi	r21, 0x11	; 17
 780:	07 c0       	rjmp	.+14     	; 0x790 <__udivmodhi4_ep>

00000782 <__udivmodhi4_loop>:
 782:	aa 1f       	adc	r26, r26
 784:	bb 1f       	adc	r27, r27
 786:	a6 17       	cp	r26, r22
 788:	b7 07       	cpc	r27, r23
 78a:	10 f0       	brcs	.+4      	; 0x790 <__udivmodhi4_ep>
 78c:	a6 1b       	sub	r26, r22
 78e:	b7 0b       	sbc	r27, r23

00000790 <__udivmodhi4_ep>:
 790:	88 1f       	adc	r24, r24
 792:	99 1f       	adc	r25, r25
 794:	5a 95       	dec	r21
 796:	a9 f7       	brne	.-22     	; 0x782 <__udivmodhi4_loop>
 798:	80 95       	com	r24
 79a:	90 95       	com	r25
 79c:	bc 01       	movw	r22, r24
 79e:	cd 01       	movw	r24, r26
 7a0:	08 95       	ret

000007a2 <_exit>:
 7a2:	f8 94       	cli

000007a4 <__stop_program>:
 7a4:	ff cf       	rjmp	.-2      	; 0x7a4 <__stop_program>
